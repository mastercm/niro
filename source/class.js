// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty;

Niro.Class = function(name, content, parent) {
  var constructor, handler, implementing, initialiser, method, proto, superOption;
  if (!_.isString(name)) {
    throw Error("Niro.Class expects first argument (name) to be a String, type was " + (typeof string));
  }
  if (!_.isFunction(content)) {
    throw Error("Niro.Class expects second argument (content) to be a function, type was " + (typeof content));
  }
  if (!_.isFunction(parent)) {
    throw Error("Niro.Class expects third argument to be a function, type was " + (typeof parent));
  }
  proto = Object.create(parent.prototype);
  proto.global = {};
  implementing = null;
  proto.implement = function(service) {
    return implementing = service;
  };
  proto.constructor = _.noop;
  content.call(proto);
  if (implementing) {
    proto = _.extend(Object.create(implementing.prototype), proto);
  }
  constructor = proto.constructor;
  initialiser = function(properties) {
    var args, property;
    property = Niro.Class.assignBeforeProperty;
    args = arguments;
    if (_.isObject(properties) && properties[property]) {
      delete properties[property];
      _.extend(this, properties);
      args = _.toArray(arguments).slice(1);
    }
    constructor.apply(this, args);
    return this;
  };
  handler = Function("var _this = this, " + name + ";\nreturn " + name + " = function(){\n   _this.init.apply(this, arguments)\n};").bind({
    init: initialiser
  })();
  _.extend(handler, proto.global, parent);
  superOption = proto["super"];
  delete proto.implement;
  delete proto.global;
  constructor = Niro.Class.superMaker('constructor', constructor, implementing || parent);
  if (superOption !== false) {
    for (name in proto) {
      if (!__hasProp.call(proto, name)) continue;
      method = proto[name];
      if (_.isFunction(method)) {
        proto[name] = Niro.Class.superMaker(name, method, (implementing != null ? implementing.prototype[method] : void 0) && implementing || parent);
      }
    }
  }
  handler.prototype = proto;
  if (handler.prototype.propertyIsEnumerable('constructor')) {
    Object.defineProperty(handler.prototype, 'constructor', {
      enumerable: false,
      writable: true,
      value: handler
    });
  }
  return handler;
};

Niro.Class.assignBeforeProperty = '_xAssignBefore';

Niro.Class.extend = function(name, content) {
  if (!_.isString(name)) {
    throw Error("Niro.Class.extend expects first argument (string) to be a string, type was " + (typeof name));
  }
  if (!_.isFunction(content)) {
    throw Error("Niro.Class.extend expects second argument (content) to be a Function, type was " + (typeof content));
  }
  return new Niro.Class(name, content, this);
};

Niro.Class.superMaker = function(name, method, parent) {
  return function() {
    var args, proto, result, superCalled;
    args = arguments;
    proto = parent.prototype;
    superCalled = false;
    this["super"] = function() {
      var superMethod;
      if ((superMethod = proto[name]) && _.isFunction(superMethod) && (superMethod !== method && superMethod !== Niro.Class)) {
        if (arguments.length) {
          args = arguments;
        }
        superMethod.apply(this, args);
      }
      return superCalled = true;
    };
    result = method.apply(this, args);
    delete this["super"];
    return result;
  };
};
