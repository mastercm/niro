// Generated by CoffeeScript 1.7.1
var __slice = [].slice,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Niro.Element = Niro.Class.extend('Element', function() {
  var classHandler, data, positionHandler, setStoreId;
  data = {
    id: 1
  };
  setStoreId = function(node) {
    var value;
    data[value = data.id++] = {};
    Object.defineProperty(node, 'niroStoreId', {
      writable: false,
      enumerable: false,
      value: value
    });
    return value;
  };
  this.implement(Array);
  this.context = document;
  this.instanceOptions = {
    types: [1, 9]
  };
  this.constructor = function() {
    var selectors;
    selectors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    Object.defineProperty(this, 'length', {
      enumerable: false,
      writable: true,
      value: 0
    });
    return this.concatValues(selectors);
  };
  this.concatValues = function() {
    var result, values;
    values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = [];
    _.search(values, (function(_this) {
      return function(value) {
        var nodes;
        if (_.isString(value)) {
          if (value.trim().indexOf('#>') === 0) {
            return result.push.apply(result, _this.parseHTML(value.remove('#>')));
          }
          try {
            nodes = _this.context.querySelectorAll(value);
            return result.push.apply(result, nodes);
          } catch (_error) {}
        }
        if (_.isNode(value)) {
          return result.push(value);
        }
      };
    })(this));
    this.push.apply(this, result.filter((function(_this) {
      return function(node, index) {
        var _ref;
        return (_ref = node.nodeType, __indexOf.call(_this.instanceOptions.types, _ref) >= 0) && result.indexOf(node) === index;
      };
    })(this)));
    return this;
  };
  this.parseHTML = function(string) {
    var temp;
    temp = document.createElement('div');
    temp.innerHTML = string;
    return temp.childNodes;
  };
  this.options = function(options) {
    this.instanceOptions = _.extend({}, this.instanceOptions, options);
    return this;
  };
  this.operate = function(options, handler) {
    var index, node, result, results, _i, _len;
    if (_.isFunction(options)) {
      handler = options;
      options = this.instanceOptions;
    } else {
      options = _.extend({}, this.instanceOptions, options || {});
    }
    results = [];
    for (index = _i = 0, _len = this.length; _i < _len; index = ++_i) {
      node = this[index];
      if (_.isString(handler)) {
        result = node[handler];
      } else if (_.isFunction(handler)) {
        result = handler(node, index, this);
      }
      if (_.isObject(result) && result.length) {
        _.search(result, function(value) {
          return results.push(value);
        });
      } else {
        results.push(result);
      }
    }
    if (options.renew) {
      return $().options(options).concatValues(results.filter(function(node) {
        var _ref;
        return _ref = node.nodeType, __indexOf.call(options.types, _ref) >= 0;
      }));
    }
    if (options.send) {
      if (results.length === 1) {
        return results[0];
      } else {
        return results;
      }
    }
    return this;
  };
  this.children = function(options) {
    if (options == null) {
      options = {};
    }
    if (options.renew == null) {
      options.renew = true;
    }
    return this.operate(options, 'childNodes');
  };
  classHandler = function() {
    var classes, options, property, _i;
    property = arguments[0], classes = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), options = arguments[_i++];
    if (options == null) {
      options = {};
    }
    if (_.isString(options)) {
      classes.push(options);
      options = {};
    }
    return this.operate(options, function(node) {
      var _ref;
      return (_ref = node.classList)[property].apply(_ref, classes);
    });
  };
  this.toggleClass = function() {
    var args;
    (args = _.toArray(arguments)).unshift('toggle');
    return classHandler.apply(this, args);
  };
  this.addClass = function() {
    var args;
    (args = _.toArray(arguments)).unshift('add');
    return classHandler.apply(this, args);
  };
  this.removeClass = function() {
    var args;
    (args = _.toArray(arguments)).unshift('remove');
    return classHandler.apply(this, args);
  };
  this.prop = function(property, value, options) {
    var setting;
    if (options == null) {
      options = value;
    }
    setting = _.isString(value);
    if (!_.isObject(options)) {
      options = {};
    }
    if (options.send == null) {
      options.send = !setting;
    }
    return this.operate(options, function(node) {
      if (setting) {
        return node[property] = value;
      } else {
        return node[property];
      }
    });
  };
  this.text = function(value, options) {
    return this.prop('textContent', value, options);
  };
  this.html = function(value, options) {
    return this.prop('innerHTML', value, options);
  };
  this.attr = function(property, value, options) {
    var setting;
    if (options == null) {
      options = value;
    }
    setting = _.isString(value);
    if (!_.isObject(options)) {
      options = {};
    }
    if (options.send == null) {
      options.send = !setting;
    }
    return this.operate(options, function(node) {
      if (setting) {
        return node.setAttribute(property, value);
      } else {
        return node.getAttribute(property);
      }
    });
  };
  this.remove = function(options) {
    if (options == null) {
      options = {};
    }
    return this.operate(options, function(node) {
      var _ref;
      if ((_ref = node.parentNode) != null) {
        _ref.removeChild(node);
      }
      return node;
    });
  };
  this.clone = function(deep, options) {
    if (options == null) {
      options = {};
    }
    if (deep == null) {
      deep = true;
    }
    if (_.isObject(deep)) {
      options = deep;
    }
    if (options.renew == null) {
      options.renew = true;
    }
    return this.operate(options, function(node) {
      return node.cloneNode(deep);
    });
  };
  positionHandler = function() {
    var nodes, options, position, _i;
    position = arguments[0], nodes = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), options = arguments[_i++];
    if (options && !_.isDictionary(options)) {
      nodes.push(options);
      options = {};
    }
    nodes = $(nodes);
    return this.operate(options, function(element) {
      var originalUsed;
      originalUsed = false;
      return _.search(nodes, function(node) {
        if (position === 'appendTo') {
          node.appendChild(originalUsed ? element.cloneNode(true) : element);
        } else if (position === 'insertBefore') {
          node.parentNode.insertBefore((originalUsed ? element.cloneNode(true) : element), node);
        } else if (position === 'insertAfter') {
          node.parentNode.insertBefore((originalUsed ? element.cloneNode(true) : element), node.nextSibling);
        }
        return originalUsed = true;
      });
    });
  };
  this.appendTo = function() {
    var nodes, options, _i;
    nodes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];
    return positionHandler.call(this, 'appendTo', nodes, options);
  };
  this.append = function() {
    var nodes, options, _i;
    nodes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];
    if (options && !_.isDictionary(options)) {
      nodes.push(options);
      options = {};
    }
    $(nodes).appendTo(this, options);
    return this;
  };
  this.after = function() {
    var nodes, options, _i;
    nodes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];
    if (options && !_.isDictionary(options)) {
      nodes.push(options);
      options = {};
    }
    $(nodes).insertAfter(this, options);
    return this;
  };
  this.before = function() {
    var nodes, options, _i;
    nodes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];
    if (options && !_.isDictionary(options)) {
      nodes.push(options);
      options = {};
    }
    $(nodes).insertBefore(this, options);
    return this;
  };
  this.insertBefore = function() {
    var nodes, options, _i;
    nodes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];
    return positionHandler.call(this, 'insertBefore', nodes, options);
  };
  this.insertAfter = function() {
    var nodes, options, _i;
    nodes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];
    return positionHandler.call(this, 'insertAfter', nodes, options);
  };
  this.removeAttributes = function() {
    var attributes, options, _i;
    attributes = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), options = arguments[_i++];
    if (_.isString(options)) {
      attributes.push(options);
      options = {};
    }
    return this.operate(options, function(node) {
      var attribute, _j, _len, _results;
      _results = [];
      for (_j = 0, _len = attributes.length; _j < _len; _j++) {
        attribute = attributes[_j];
        _results.push(node.removeAttribute(attribute));
      }
      return _results;
    });
  };
  this.value = function(value, options) {
    return this.prop('value', value, options);
  };
  this.data = function(property, value) {
    var setting;
    setting = _.isString(property) && arguments.length > 1;
    return this.operate({
      send: !setting
    }, function(node) {
      var id;
      id = node.niroStoreId != null ? node.niroStoreId : node.niroStoreId = setStoreId(node);
      if (setting) {
        return data[id][property] = value;
      } else if (property) {
        return data[id][property];
      } else {
        return data[id];
      }
    });
  };
  return this.on = function(event, selector, handler, bubble, options) {
    var innerHandler;
    if (_.isFunction(selector)) {
      options = bubble;
      bubble = handler;
      handler = selector;
      selector = void 0;
    }
    if (_.isObject(bubble)) {
      options = bubble;
      bubble = false;
    }
    if (options == null) {
      options = {};
    }
    innerHandler = function(event) {
      var _ref;
      if (selector && (_ref = event.target, __indexOf.call(this.querySelectorAll(selector), _ref) < 0)) {
        return;
      }
      return handler.call(this, event);
    };
    return this.operate(options, function(node) {
      var nodeData;
      nodeData = $(node).data();
      (nodeData.eventListeners != null ? nodeData.eventListeners : nodeData.eventListeners = []).push({
        innerHandler: innerHandler,
        handler: handler
      });
      return node.addEventListener(event, innerHandler, bubble);
    });
  };
});

window.$ = function() {
  var selectors;
  selectors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return new Niro.Element(selectors);
};
